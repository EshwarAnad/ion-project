options:
	p: &6 ●&f #
	t: &f
	h: &7
	em: &cInvalid Permissions
	joinMessage: &e%name of player% joined
	quitMessage: &e%name of player% left
	animals: pig and sheep and cow and horse and chicken and wolf and ocelot and bat and mooshroom and rabbit and squid and villager and donkey
	monsters: cave spider and enderman and spider and zombie pigman and blaze and creeper and guardian and endermite and ghast and magma cube and silverfish and skeleton and slime and witch and wither skeleton and zombie
on load:
	if {proton.maxHealth} is not set:
		set {proton.maxHealth} to 10
command /proton [<text>]:
	description: Shows all commands in Proton
	trigger:
		if arg 1 is not set:
			send "&cUsage: /proton [help]"
		if arg 1 is "help":
			send "&6&m---+---&r &eProton &6&m---+---&r"
			send " &8• &7A List of commands can be found here:"
			send " &f&nhttps://goo.gl/EAFlng"
command /gamemode [<text>] [<player>]:
	permission: proton.gamemode
	description: Changes gamemode
	permission message: {@em}
	usage: /gamemode [gamemode] (player)
	aliases: /gm
	trigger:
		if arg 1 is not set:
			send "&cUsage: /gamemode [num] (player)"
		else if arg 1 is "creative" or "c" or "1":
			if arg 2 is not set:
				set player's gamemode to creative
				send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to sender
			else:
				set player-arg's gamemode to creative
				send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Creative{@t}." to sender
				send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
		else if arg 1 is "survival" or "s" or "0":
			if arg 2 is not set:
				set player's gamemode to survival
				send "{@p} Your gamemode has been updated to {@h}Survival{@t}." to sender
			else:
				set player-arg's gamemode to survival
				send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Survival{@t}." to sender
				send "{@p} Your gamemode has been updated to {@h}Survival{@t}." to player-arg
		else if arg 1 is "adventure" or "a" or "2":
			if arg 2 is not set:
				set player's gamemode to adventure
				send "{@p} Your gamemode has been updated to {@h}Adventure{@t}." to sender
			else:
				set player-arg's gamemode to adventure
				send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Adventure{@t}." to sender
				send "{@p} Your gamemode has been updated to {@h}Adventure{@t}." to player-arg
		else if arg 1 is "spectator" or "sp" or "3" or "spec":
			if arg 2 is not set:
				set player's gamemode to spectator
				send "{@p} Your gamemode has been updated to {@h}Spectator{@t}." to sender
			else:
				set player-arg's gamemode to spectator
				send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Spectator{@t}." to sender
				send "{@p} Your gamemode has been updated to {@h}Spectator{@t}." to player-arg
		else:
			send "&c&oInvalid Argument."
			send "&cUsage: /gm [num] (player)"
command /fly [<player>]:
	permission: proton.fly
	description: Toggles flight
	permission message: {@em}
	usage: /fly (player)
	trigger:
		if arg 1 is not set:
			if {proton.fly::%sender%} is true:
				delete {proton.fly::%sender%}
				set sender's fly mode to false
				send "{@p} Flight mode {@h}disabled{@t}."
			else:
				set {proton.fly::%sender%} to true
				set sender's fly mode to true
				send "{@p} Flight mode {@h}enabled{@t}."
		else:
			if {proton.fly::%player-arg%} is true:
				delete {proton.fly::%player-arg%}
				set player-arg's fly mode to false
				send "{@p} Flight mode {@h}disabled{@t}." to player-arg
				send "{@p} {@h}%player-arg%{@t}'s flight mode was {@h}disabled{@t}." to sender
			else:
				set {proton.fly::%player-arg%} to true
				set player-arg's fly mode to true
				send "{@p} Flight mode {@h}enabled{@t}." to player-arg
				send "{@p} {@h}%player-arg%{@t}'s flight mode was {@h}enabled{@t}." to sender
command /tp [<player>] [<player>]:
	permission: proton.tp
	description: Teleports to player
	permission message: {@em}
	usage: /tp [player] (player)
	trigger:
		if arg 1 is not set:
			send "&cUsage: /tp [player] (player)"
		else if arg 1 is set:
			if arg 2 is not set:
				if {proton.teleporting::%sender%} is true:
					send "&c&oPlayer is already being teleported"
					stop
				else:
					set {proton.teleporting::%sender%} to true
					set {proton.lastLoc::%sender%} to sender's location
					teleport sender to arg-1
					send "{@p} Teleported to {@h}%arg-1%{@t}." to sender
					wait 1 second
					delete {proton.teleporting::%sender%}
			else:
				if {proton.teleporting::%arg-1%} is true:
					send "&c&oPlayer is already being teleported"
					stop
				else:
					set {proton.teleporting::%arg-1%} to true
					set {proton.lastLoc::%arg-1%} to arg-1's location
					teleport arg-1 to arg-2
					send "{@p} Teleported {@h}%arg-1%{@t} to {@t}%arg-2%{@t}" to sender
					send "{@p} Teleported to {@h}%arg-2%{@t}." to arg-1
					wait 1 second
					delete {proton.teleporting::%arg-1%}
command /tphere [<player>]:
	permission: proton.tphere
	description: Teleports a player to sender
	permission message: {@em}
	usage: /tphere [player]
	aliases: /s
	trigger:
		if arg 1 is not set:
			send "&cUsage: /tphere [player]"
		else if arg 1 is set:
			if {proton.teleporting::%arg-1%} is true:
				send "&c&oPlayer is already being teleported"
				stop
			else:
				set {proton.teleporting::%arg-1%} to true
				set {proton.lastLoc::%arg-1%} to arg-1's location
				teleport arg-1 to sender
				send "{@p} Teleported {@h}%arg-1%{@t} to you." to sender
				send "{@p} Teleported to {@h}%sender%{@t}." to arg-1
				wait 1 second
				delete {proton.teleporting::%arg-1%}
command /tpall:
	permission: proton.tpall
	description: Teleports all players to sender
	permission message: {@em}
	usage: /tpall
	trigger:
		set {_loc} to sender's location
		set {_count} to 0
		set {_total} to number of all players
		loop all players:
			teleport loop-player to sender's location
			add 1 to {_count}
			if {_count} = 20:
				send "{@p} Sent 20 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
			if {_count} = 40:
				send "{@p} Sent 40 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
			if {_count} = 60:
				send "{@p} Sent 60 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
			if {_count} = 80:
				send "{@p} Sent 80 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
			if {_count} = 100:
				send "{@p} Sent 100 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
			if {_count} = 120:
				send "{@p} Sent 120 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
			if {_count} = 140:
				send "{@p} Sent 140 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
			if {_count} = 160:
				send "{@p} Sent 160 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
			if {_count} = 180:
				send "{@p} Sent 180 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
			if {_count} = 200:
				send "{@p} Sent 200 people. Next group in {@h}3s{@t}. &8[&e%{_count}%&7/&e%{_total}%&8]"
				wait 3 seconds
		delete {_loc}
		send "{@p} Teleported all players to your location"
		broadcast "{@p} Teleported to {@h}%sender%{@t}."
command /tpcoords [<integer>] [<integer>] [<integer>]:
	permission: proton.tpcoords
	aliases: /tppos
	permission message: {@em}
	usage: /tpcoords [x] [y] [z]
	trigger:
		if arg 1 is not set:
			send "&cUsage: /tpcoords [x] [y] [z]"
		else if arg 1 is set:
			if arg 2 is set:
				if arg 3 is set:
					if {proton.teleporting::%arg-1%} is true:
						send "&c&oPlayer is already being teleported"
						stop
					else:
						set {_x} to arg-1
						set {_z} to arg-3
						add 0.5 to {_x}
						add 0.5 to {_z}
						set {proton.teleporting::%arg-1%} to true
						set {proton.lastLoc::%sender%} to sender's location
						set {_world} to sender's world
						set {_loc} to location({_x}, arg-2, {_z}, {_world})
						teleport sender to {_loc}
						send "{@p} Teleported to {@h}%{_x}%, %arg-2%, %{_z}%{@t}."
						wait 1 second
						delete {proton.teleporting::%arg-1%}
				else:
					send "&c&oInvalid Argument."
					send "&cUsage: /tpcoords [x] [y] [z]"
			else:
				send "&c&oInvalid Argument."
				send "&cUsage: /tpcoords [x] [y] [z]"
command /sethome:
	permission: proton.sethome
	permission message: {@em}
	usage: /sethome
	trigger:
		set {proton.home::%sender's uuid%} to sender's location
		set {_x} to sender's x-coordinate
		set {_y} to sender's y-coordinate
		set {_z} to sender's z-coordinate
		send "{@p} Home set at {@h}%{_x}%, %{_y}%, %{_z}%{@t}."
command /home:
	permission: proton.home
	permission message: {@em}
	usage: /home
	trigger:
		if {proton.home::%sender's uuid%} is set:
			if {proton.teleporting::%sender%} is true:
				send "&c&oPlayer is already being teleported"
				stop
			else:
				set {proton.teleporting::%sender%} to true
				set {proton.lastLoc::%sender%} to sender's location
				teleport sender to {proton.home::%sender's uuid%}
				send "{@p} Teleported to your home location."
				wait 1 second
				delete {proton.teleporting::%sender%}
		else:
			send "&c&oYou do not have a home set."
			send "&cUsage: /sethome"
command /warp [<text>] [<player>]:
	permission: proton.warp
	permission message: {@em}
	usage: /warp [warpName] (player)
	trigger:
		if arg 1 is set:
			if arg 2 is set:
				if sender has permission "proton.warp.other":
					if "%{proton.warps::*}%" contains "%arg-1%":
						if sender has permission "proton.warp.%arg-1%":
							set {proton.lastLoc::%player-arg%} to player-arg's location
							teleport player-arg to {proton.warpLoc::%arg-1%}
							send "{@p} Teleported {@h}%player-arg%{@t} to {@h}%arg-1%{@t}." to sender
							send "{@p} Teleported to {@h}%arg-1%{@t}." to player-arg
						else:
							send "&cYou don't have permission to this warp" to sender
					else:
						send "&cWarp &6%arg-1%&c does not exist" to sender
				else:
					send "&cYou don't have permission to warp other players."
			else:
				if "%{proton.warps::*}%" contains "%arg-1%":
					if sender has permission "proton.warp.%arg-1%":
						set {proton.lastLoc::%player%} to player's location
						teleport player to {proton.warpLoc::%arg-1%}
						send "{@p} Teleported to {@h}%arg-1%{@t}." to player
					else:
						send "&cYou don't have permission to this warp" to player
				else:
					send "&cWarp &6%arg-1%&c does not exist" to player
		else:
			send "&cUsage: /warp [warpName] (player)"
		stop
command /setwarp [<text>]:
	permission: proton.setwarp
	permission message: {@em}
	usage: /setwarp [warpName]
	aliases: /warpset
	trigger:
		if arg 1 is set:
			if "%arg-1%" contains " " or "," or "." or "::" or ";" or "<" or ">" or "{" or "}" or "(" or ")" or ":" or "-" or "+":
				send "&cWarps cannot contain special characters. Use &oA-Z&r&c and &o0-9&r&c."
				stop
			else:
				if "%{proton.warps::*}%" contains "%arg-1%":
					if {proton.warpOverwite::%player%} is not set:
						send "&cWarp &6%arg-1%&c already exists. To overwrite, run the command again."
						set {proton.warpOverwite::%player%} to true
						wait 10 seconds
						delete {proton.warpOverwite::%player%}
					else:
						set {proton.warpLoc::%arg-1%} to player's location
						if "%{proton.warps::*}%" does not contain "%arg-1%":
							add arg-1 to {proton.warps::*}
							send "{@p} Warp {@h}%arg-1%{@t} has been set to your location"
						else:
							send "{@p} Warp {@h}%arg-1%{@t} has been set to your location"
				else:
					set {proton.warpLoc::%arg-1%} to player's location
					if "%{proton.warps::*}%" does not contain "%arg-1%":
						add arg-1 to {proton.warps::*}
						send "{@p} Warp {@h}%arg-1%{@t} has been set to your location"
					else:
						send "{@p} Warp {@h}%arg-1%{@t} has been set to your location"
		else:
			send "&cUsage: /setwarp [warpName]"
		stop
command /delwarp [<text>]:
	permission: proton.delwarp
	permission message: {@em}
	usage: /delwarp [warpName]
	aliases: /warpdel
	trigger:
		if arg 1 is "-c":
			player has permission "proton.resetWarps":
				clear {proton.warps::*}
				clear {proton.warpLoc::*}
				send "{@p} All warps cleared"
		else if arg 1 is set:
			if "%{proton.warps::*}%" contains "%arg-1%":
				delete {proton.warpLoc::%arg-1%}
				remove arg-1 from {proton.warps::*}
				send "{@p} Warp {@h}%arg-1%{@t} has been deleted"
			else:
				send "&cWarp &6%arg-1%&c does not exist."
		else:
			send "&cUsage: /delwarp [warpName]"
command /warps:
	permission: proton.warps
	permission message: {@em}
	usage: /warps
	aliases: /warplist
	trigger:
		send "{@p} &aAll warps"
		if "%{proton.warps::*}%" = "<none>":
			send "   &7▪ &cNo warps set"
		else:
			send "   &7▪ &f&o%{proton.warps::*}%"
		stop
command /setspawn:
	permission: proton.setspawn
	permission message: {@em}
	usage: /setspawn
	trigger:
		set {proton.spawn} to sender's location
		set {_x} to sender's x-coordinate
		set {_y} to sender's y-coordinate
		set {_z} to sender's z-coordinate
		send "{@p} Spawn location set to {@h}%{_x}%, %{_y}%, %{_z}%{@t}."
command /spawn [<player>]:
	permission: proton.spawn
	permission message: {@em}
	usage: /spawn (player)
	trigger:
		if {proton.spawn} is set:
			if arg 1 is set:
				if {proton.teleporting::%arg-1%} is true:
					send "&c&oPlayer is already being teleported"
					stop
				else:
					set {proton.teleporting::%arg-1%} to true
					set {proton.lastLoc::%arg-1%} to arg-1's location
					teleport arg-1 to {proton.spawn}
					send "{@p} Teleported {@h}%arg-1%{@t} to spawn." to sender
					send "{@p} Teleported to spawn." to arg-1
					wait 1 second
					delete {proton.teleporting::%arg-1%}
			else:
				if {proton.teleporting::%sender%} is true:
					send "&c&oPlayer is already being teleported"
					stop
				else:
					set {proton.teleporting::%arg-1%} to true
					set {proton.lastLoc::%sender%} to sender's location
					teleport sender to {proton.spawn}
					send "{@p} Teleported to spawn." to sender
					wait 1 second
					delete {proton.teleporting::%arg-1%}
		else:
			send "&c&oSpawn is not set."
			if sender has permission "proton.setspawn":
				send "&cUsage: /setspawn"
#command /effect [<text>] [<text>] [<integer>] [<integer>]:
#	permission: proton.effect
#	permission message: {@em}
#	usage: &c/effect
#	description: Apply potion effects to a player
#	trigger:
#		if arg 1 is not set:
#			send "&cUsage: /effect [player] [effect] [time] (tier)"
#		if arg 1 is "all" or "*":
#			if player has permission "proton.effect.all":
#				if arg 2 is set:
#					if arg 3 is set:
#						if arg 4 is set:
#							loop all players:
#								apply (arg-2) (arg-4) to loop-player for (arg-3) seconds
#							send "{@p} Applied {@h}%arg-2% %arg-3%{@t} to all players for {@h}%arg-4% seconds{@t}."
#						else:
#							loop all players:
#								apply (arg-2) to loop-player for (arg-3) seconds
#							send "{@p} Applied {@h}%arg-2%{@t} to all players for {@h}%arg-4% seconds{@t}."
#					else:
#						send "&cUsage: /effect %arg-1% %arg-2% [time] (tier)"
#				else:
#					send "&cUsage: /effect %arg-1% [effect] [time] (tier)"
#			else:
#				send "&cInsufficient permissions."
#		else if arg 1 is set:
#			if arg 2 is set:
#				if arg 3 is set:
#					if arg 4 is set:
#						apply (arg-2) (arg-4) to (arg-1) for (arg-3) seconds
#						send "{@p} Applied {@h}%arg-2% %arg-3%{@t} to &a%arg-1% for {@h}%arg-4% seconds{@t}."

on join:
	delete {proton.visibility::%event-player%}
	delete {proton.fly::%event-player%}
	remove invisibility from the event-player

command /gmc [<player>]:
	permission: proton.gm
	permission message: {@em}
	usage: &c/gmc (player)
	description: Changes gamemode to Creative
	trigger:
		if arg 1 is not set:
			set player's gamemode to creative
			send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to sender
		else:
			set player-arg's gamemode to creative
			send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
			send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Creative{@t}" to sender
command /gms [<player>]:
	permission: proton.gm
	permission message: {@em}
	usage: &c/gms (player)
	description: Changes gamemode to Survival
	trigger:
		if arg 1 is not set:
			set player's gamemode to survival
			send "{@p} Your gamemode has been updated to {@h}Survival{@t}." to sender
		else:
			set player-arg's gamemode to survival
			send "{@p} Your gamemode has been updated to {@h}Survival{@t}." to player-arg
			send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Survival{@t}" to sender
command /gma [<player>]:
	permission: proton.gm
	permission message: {@em}
	usage: &c/gma (player)
	description: Changes gamemode to Adventure
	trigger:
		if arg 1 is not set:
			set player's gamemode to Adventure
			send "{@p} Your gamemode has been updated to {@h}Adventure{@t}." to sender
		else:
			set player-arg's gamemode to Adventure
			send "{@p} Your gamemode has been updated to {@h}Adventure{@t}." to player-arg
			send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Adventure{@t}" to sender
command /gmsp [<player>]:
	permission: proton.gm
	permission message: {@em}
	usage: &c/gmsp (player)
	description: Changes gamemode to Spectator
	trigger:
		if arg 1 is not set:
			set player's gamemode to Spectator
			send "{@p} Your gamemode has been updated to {@h}Spectator{@t}." to sender
		else:
			set player-arg's gamemode to Spectator
			send "{@p} Your gamemode has been updated to {@h}Spectator{@t}." to player-arg
			send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Spectator{@t}" to sender
on join:
	set join message to "{@joinMessage}"
on quit:
	set leave message to "{@quitMessage}"
command /top:
	permission: proton.top
	permission message: {@em}
	usage: &c/top
	description: Teleports you up to the highest point above you
	trigger:
		set {_loc} to location of block at player
		set y-coordinate of {_loc} to 256
		set {_n} to 0
		loop 255 times:
			set {_n} to {_n}+1
			block {_n} below block at {_loc} is not air
			set {_n} to {_n}-1
			teleport player to block {_n} below block at {_loc}
			send "{@p} Teleported to top."
			stop
command /speed [<number>] [<player>]:
	permission: proton.speed
	permission message: {@em}
	usage: &c/speed [0-5] (player)
	description: Changes walk/flight speed
	trigger:
		if arg 1 is set:
			if arg 2 is not set:
				if arg 1 is between 1 and 5:
					set {_speed} to arg-1 / 5
					if player is flying:
						send "{@p} Your flight speed was set to {@h}%arg-1%{@t}."
						set the player's fly speed to {_speed}
					else:
						send "{@p} Your walk speed was set to {@h}%arg-1%{@t}."
						set the player's walk speed to {_speed}
				else if arg 1 is greater than 5:
					send "&c&oToo large of a number."
					send "&cUsage: /speed [0-5] (player)"
				else:
					if player is flying:
						send "{@p} Your flight speed was {@h}reset{@t}."
						reset the player's fly speed
					else:
						send "{@p} Your walk speed was {@h}reset{@t}."
						reset the player's walk speed
			else if arg 2 is set:
				if arg 1 is between 1 and 5:
					set {_speed} to arg-1 / 5
					if player-arg is flying:
						send "{@p} {@h}%player-arg%'s{@t} flight speed was set to {@h}%arg-1%{@t}."
						send "{@p} Your flight speed was set to {@h}%arg-1%{@t}." to player-arg
						set the player-arg's fly speed to {_speed}
					else:
						send "{@p} {@h}%player-arg%'s{@t} walk speed was set to {@h}%arg-1%{@t}."
						send "{@p} Your walk speed was set to {@h}%arg-1%{@t}." to player-arg
						set the player-arg's walk speed to {_speed}
				else if arg 1 is greater than 5:
					send "&c&oToo large of a number."
					send "&cUsage: /speed [0-5] (player-arg)"
				else:
					if player-arg is flying:
						send "{@p} {@h}%player-arg%'s{@t} flight speed was {@h}reset{@t}."
						send "{@p} Your flight speed was {@h}reset{@t}." to player-arg
						reset the player-arg's fly speed
					else:
						send "{@p} {@h}%player-arg%'s{@t} flight speed was {@h}reset{@t}."
						send "{@p} Your walk speed was {@h}reset{@t}." to player-arg
						reset the player-arg's walk speed
command /blacklist [<text>] [<offline player>]:
	permission: proton.blacklist
	permission message: {@em}
	usage: &c/blacklist [add|remove|list|reset] (player)
	description: Blacklists people to the server
	trigger:
		if arg 1 is "add" or "+":
			if arg 2 is set:
				send "{@p} {@h}%offline player-arg%{@t} has been added to the &8blacklist{@t}."
				add "%offline player-arg%" to {proton.blacklist::*}
			else:
				send "&c&oSpecify a player"
				send "&cUsage: /blacklist %arg-1% (player)"
		else if arg 1 is "remove" or "delete" or "-":
			if arg 2 is set:
				if "%{proton.blacklist::*}%" contains "%offline player-arg%":
					send "{@p} {@h}%offline player-arg%{@t} has been removed from the &8blacklist{@t}."
					remove "%offline player-arg%" from {proton.blacklist::*}
				else:
					send "&c&oThat player is not on the blacklist"
					send "&cUsage: /blacklist %arg-1% &m%arg-2%"
			else:
				send "&c&oSpecify a player"
				send "&cUsage: /blacklist %arg-1% (player)"
		else if arg 1 is "list":
			send "{@p} &8Blacklist&7:"
			loop {proton.blacklist::*}:
				send "  &7- &a%loop-value%"
			stop
		else if arg 1 is "reset":
			if sender has permission "proton.blacklist.reset":
				delete {proton.blacklist::*}
				send "{@p} &8Blacklist{@t} cleared."
			else:
				send "{@em}"
		else if arg 1 is "on":
			set {proton.blacklist} to true
			send "{@p} Blacklist enabled."
		else if arg 1 is "off":
			set {proton.blacklist} to false
			send "{@p} Blacklist disabled."
		else:
			send "&cUsage: /blacklist [add|remove|list|reset] (player)"
		stop
on connect:
	if {proton.whitelist} is true:
		if "%{proton.whitelist::*}%" doesn't contain "%event-player%":
			kick event-player due to "&7You are not &fWhitelisted &7on this server."
			stop
		else if "%{proton.blacklist::*}%" contains "%event-player%":
			if {proton.blacklist} is true:
				kick event-player due to "&7You are &8Blacklisted&7 on this server."
				stop
	else if {proton.blacklist} is true:
		if "%{proton.blacklist::*}%" contains "%event-player%":
			kick event-player due to "&7You are &8Blacklisted&7 on this server."
			stop
command /whitelist [<text>] [<offline player>]:
	permission: proton.whitelist
	permission message: {@em}
	usage: &c/whitelist [add|remove|list|reset] (player)
	description: Whitelists people to the server
	trigger:
		if arg 1 is "add" or "+":
			if arg 2 is set:
				send "{@p} {@h}%offline player-arg%{@t} has been added to the &7Whitelist{@t}."
				add "%offline player-arg%" to {proton.whitelist::*}
			else:
				send "&c&oSpecify a player"
				send "&cUsage: /whitelist %arg-1% (player)"
		else if arg 1 is "remove" or "delete" or "-":
			if arg 2 is set:
				if "%{proton.whitelist::*}%" contains "%offline player-arg%":
					send "{@p} {@h}%offline player-arg%{@t} has been removed from the &7Whitelist{@t}."
					remove "%offline player-arg%" from {proton.whitelist::*}
				else:
					send "&c&oThat player is not on the whitelist"
					send "&cUsage: /whitelist %arg-1% &m%arg-2%"
			else:
				send "&c&oSpecify a player"
				send "&cUsage: /whitelist %arg-1% (player)"
		else if arg 1 is "list":
			send "{@p} &7Whitelist&7:"
			loop {proton.whitelist::*}:
				send "  &7- &a%loop-value%"
			stop
		else if arg 1 is "reset":
			if sender has permission "proton.whitelist.reset":
				delete {proton.whitelist::*}
				send "{@p} &7Whitelist{@t} cleared."
			else:
				send "{@em}"
		else if arg 1 is "on":
			set {proton.whitelist} to true
			send "{@p} Whitelist enabled."
		else if arg 1 is "off":
			set {proton.whitelist} to false
			send "{@p} Whitelist disabled."
		else:
			send "&cUsage: /whitelist [add|remove|list|reset] (player)"
		stop
command /time [<text>]:
	permission: proton.time
	permission message: {@em}
	usage: &c/time [set] [day|night|noon|midnight|...]
	description: Sets the time of day
	trigger:
		if arg 1 is "day":
			set time to 9:00am
			send "{@p} Time set to {@h}Day{@t}, or &a9:00am{@t}."
		else if arg 1 is "noon":
			set time to 12:00pm
			send "{@p} Time set to {@h}Noon{@t}, or &a12:00pm{@t}."
		else if arg 1 is "night":
			set time to 9:00pm
			send "{@p} Time set to {@h}Night{@t}, or &a9:00pm{@t}."
		else if arg 1 is "midnight":
			set time to 12:00am
			send "{@p} Time set to {@h}Midnight{@t}, or &a12:00am{@t}."
		else if arg 1 is "dawn":
			set time to 6:00am
			send "{@p} Time set to {@h}Dawn{@t}, or &a6:00am{@t}."
		else if arg 1 is "dusk":
			set time to 7:00pm
			send "{@p} Time set to {@h}Dusk{@t}, or &a7:00am{@t}."
		else:
			send "&cUsage: &c/time [day|noon|night|midnight|dawn|dusk]"
command /day:
	permission: proton.time
	permission message: {@em}
	description: Sets the time of day
	trigger:
		player command "/time day"
command /night:
	permission: proton.time
	permission message: {@em}
	description: Sets the time of day
	trigger:
		player command "/time night"
command /weather [<text>]:
	permission: proton.weather
	permission message: {@em}
	usage: &c/weather [sun|rain|thunder]
	description: Sets the worlds weather
	trigger:
		if arg 1 is "sun":
			set weather to clear
			send "{@p} Weather set to {@h}Sun{@t}."
		else if arg 1 is "rain":
			set weather to rain
			send "{@p} Weather set to {@h}Rain{@t}."
		else if arg 1 is "thunder":
			set weather to thunder
			send "{@p} Weather set to {@h}Thunder{@t}."
		else:
			send "&cUsage: /weather [sun|rain|thunder]"
on weather change:
	if {proton.permWeather} is true:
		cancel event
command /sun:
	permission: proton.weather
	permission message: {@em}
	description: Sets the worlds weather
	trigger:
		player command "/weather sun"
command /rain:
	permission: proton.weather
	permission message: {@em}
	description: Sets the worlds weather
	trigger:
		player command "/weather rain"
command /thunder:
	permission: proton.weather
	permission message: {@em}
	description: Sets the worlds weather
	trigger:
		player command "/weather thunder"
command /head [<text>]:
	permission: proton.head
	permission message: {@em}
	usage: &c/head [player]
	description: Gives a player head
	aliases: /skull, /playerhead
	trigger:
		if arg 1 is set:
			set {_head} to arg-1 parsed as offline player
			give {_head}'s skull named "&aPlayer Head" with lore "&7Skull Owner: &f%arg-1%" to player
			send "{@p} Given {@h}%arg-1%{@t}'s Head."
		else if arg 1 is not set:
			#set {_head} to sender
			give player's skull named "&aPlayer Head" with lore "&7Skull Owner: &f%player%" to player
			send "{@p} Given {@h}%sender%{@t}'s Head."
command /clear [<player>]:
	permission: proton.clear
	permission message: {@em}
	usage: &c/clear [player]
	description: Clears inventory
	aliases: /ci, /clearinventory
	trigger:
		if arg 1 is set:
			if "%player-arg%" = "%sender%":
				player command "/clear"
				stop
			else:
				clear player-arg's inventory
				send "{@p} Cleared {@h}%player-arg%'s{@t} inventory{@t}."
				send "{@p} Your inventory has been cleared{@t}." to player-arg
		else:
			clear player's inventory
			send "{@p} Cleared {@h}your{@t} inventory{@t}."
command /heal [<player>]:
	permission: proton.heal
	permission message: {@em}
	usage: &c/clear [player]
	description: Heals to full health
	trigger:
		if arg 1 is set:
			if "%player-arg%" = "%sender%":
				player command "/heal"
				stop
			else:
				if sender has permission "proton.heal.other":
					heal player-arg
					send "{@p} Healed {@h}%player-arg%{@t}."
				else:
					send "{@em}"
		else:
			heal player
			send "{@p} You were healed."
on command "/heal *":
	if player has permission "proton.heal.all":
		cancel event
		loop all players:
			heal loop-player
		send "{@p} Healed all players"
on command "/feed *":
	if player has permission "proton.feed.all":
		cancel event
		loop all players:
			set the loop-player's food level to 20
			apply saturation 2 to loop-player for 10 seconds
		send "{@p} Nourished all players"
command /feed [<player>]:
	permission: proton.feed
	permission message: {@em}
	usage: &c/feed [player]
	description: Feeds to full hunger
	trigger:
		if arg 1 is set:
			if "%player-arg%" = "%sender%":
				player command "/feed"
				stop
			else:
				if sender has permission "proton.feed.other":
					set the player-arg's food level to 20
					send "{@p} Nourished {@h}%player-arg%{@t}."
					send "{@p} You have been nourished." to player-arg
					apply saturation 2 to player-arg for 10 seconds
				else:
					send "{@em}"
		else:
			set the player's food level to 20
			send "{@p} You have been nourished."
			apply saturation 2 to player for 10 seconds
command /maxhealth [<integer>]:
	permission: proton.maxhealth
	permission message: {@em}
	usage: &c/maxhealth [number]
	description: Sets maximum health, goes by hearts.
	trigger:
		if arg 1 is not set:
			send "&cUsage: /maxhealth [1-100|0=reset]"
		else if arg 1 is less than or equal to 0:
			set {proton.maxHealth} to 10
			loop all players:
				set max health of loop-player to {proton.maxHealth}
			send "{@p} Maximum health has been set to &a%{proton.maxHealth}% Hearts{@t}."
		else if arg 1 is greater than 100:
			send "&c&oToo high of a number!"
			send "&cUsage: /maxhealth [1-100|0=reset]"
		else:
			set {proton.maxHealth} to arg-1
			loop all players:
				set max health of loop-player to {proton.maxHealth}
			send "{@p} Maximum health has been set to &a%{proton.maxHealth}% Hearts{@t}."
on join:
	if {proton.maxHealth} is set:
		set event-player's max health to {proton.maxHealth}
command /rename [<text>]:
	permission: proton.rename
	permission message: {@em}
	usage: &c/rename [name]
	description: Renames held item
	trigger:
		if arg 1 is set:
			if player's tool is nothing:
				send "&cYou can't rename nothing!"
			else:
				set player's held item's name to "%colored arg-1%"
				send "{@p} Renamed &n%player's held item%&r to {@h}%colored arg-1%{@t}."
		else:
			send "&cUsage: /rename [name]"
on sign change:
	if line 1 is set:
		set line 1 to "%colored line 1%"
	if line 2 is set:
		set line 2 to "%colored line 2%"
	if line 3 is set:
		set line 3 to "%colored line 3%"
	if line 4 is set:
		set line 4 to "%colored line 4%"
command /back:
	permission: proton.back
	permission message: {@em}
	usage: &c/back
	description: Teleports to last location
	trigger:
		if {proton.lastLoc::%sender%} is set:
			set {_lastLoc} to sender's location
			teleport sender to {proton.lastLoc::%sender%}
			set {proton.lastLoc::%sender%} to {_lastLoc}
			send "{@p} Teleported to previous location."
		else:
			send "&cYou have no previous location!"
#command /killall [<text>]:
#	permission: proton.killall
#	permission message: {@em}
#	usage: &c/killall [...]
#	description: Kills specified or all entities
#	trigger:
#		if arg 1 is not set:
#			kill all bat, chicken, cow, pig, rabbit, sheep, horse, squid, villager, spider, enderman, zombie, blaze, creeper, ghast, silverfish, skeleton, slime, witch, wolf, ocelot, iron golem, snow golem, enderdragon, wither in player's world
#			send "{@p} Killed all entites."
#		else if arg 1 is "passive" or "animals":
#			kill all bat, chicken, cow, pig, rabbit, sheep, horse, squid, villager, wolf, ocelot, iron golem, snow golem in player's world
#			send "{@p} Killed all passive entities."
#		else if arg 1 is "hostile" or "monsters":
#			kill all spider, enderman, zombie, blaze, creeper, ghast, silverfish, skeleton, slime, witch, enderdragon, wither in player's world
#			send "{@p} Killed all hostile entities."
#		else if arg 1 is set:
#			kill all arg-1 in player's world
#			send "{@p} Killed all {@h}%arg-1%{@t}."
command /message [<player>] [<text>]:
	permission: proton.message
	permission message: {@em}
	description: Sends a private message to a player
	aliases: /msg, /whisper, /w
	trigger:
		if arg 1 is set:
			if arg 2 is set:
				if player-arg is online:
					set {proton.msgReply::%player-arg%} to sender
					send "&7[&6You &7» &6%player-arg%&7] &f%arg-2%" to sender
					send "&7[&6%sender% &7» &6You&7] &f%arg-2%" to player-arg
				else:
					send "&c%player-arg% is not online"
			else:
				send "&cUsage: /message %arg-1% [message]"
		else:
			send "&cUsage: /message [player] [message]"
command /reply [<text>]:
	permission: proton.message.reply
	permission message: {@em}
	description: Replies to last messanger
	aliases: /r
	trigger:
		if {proton.msgReply::%sender%} is set:
			if arg 1 is set:
				set {proton.msgReply::%{proton.msgReply::%sender%}%} to sender
				send "&7[&6You &7&m->&r &6%{proton.msgReply::%sender%}%&7] &f%arg-1%" to sender
				send "&7[&6%sender% &7&m->&r &6You&7] &f%arg-1%" to {proton.msgReply::%sender%}
			else:
				send "&cUsage: /reply [message]"
		else:
			send "&cYou have no-one to reply to. :("
#command /xp [<text>] [<integer>] [<player>]:
#	permission: proton.xp
#	permission message: {@em}
#	description: Manages experience
#	aliases: /experience, /exp
#	trigger:
#		if arg 1 is "level" or "l":
#			if arg 2 is set:
#				if arg 3 is set:
#					set {_a1} to argument 2 * 2
#					set {_a2} to argument 2 - {_a1}
#					reduce the player-arg's level by {_a2}
#					if arg-2 is less than 0:
#						send "{@p} Removed &a%arg-2% EXP Levels{@t} from {@h}%player-arg%{@t}."
#					else:
#						send "{@p} Gave &a%arg-2% EXP Levels{@t} from {@h}%player-arg%{@t}."
#				else:
#					set {_a1} to argument 2 * 2
#					set {_a2} to argument 2 - {_a1}
#					reduce the sender's level by {_a2}
#					if arg-2 is less than 0:
#						send "{@p} Removed &a%arg-2% EXP Levels{@t}."
#					else:
#						send "{@p} Gave &a%arg-2% EXP Levels{@t}."
#			else if arg 2 is not set:
#				send "&cUsage: /xp [give|set|remove] [amount] (player)"
#		else if arg 1 is "point" or "p":
#			if arg 2 is set:
#				if arg 3 is set:
#					give arg-2 xp to the player-arg
#					if arg-2 is less than 0:
#						send "{@p} Removed &a%arg-2% EXP Levels{@t} from {@h}%player-arg%{@t}."
#					else:
#						send "{@p} Gave &a%arg-2% EXP Levels{@t} from {@h}%player-arg%{@t}."
#				else:
#					give arg-2 xp to the player-arg
#					if arg-2 is less than 0:
#						send "{@p} Removed &a%{_a}% EXP Levels{@t}."
#					else:
#						send "{@p} Gave &a%arg-2% EXP Levels{@t}."
#			else if arg 2 is not set:
#				send "&cUsage: /xp [give|set|remove] [amount] (player)"
#
